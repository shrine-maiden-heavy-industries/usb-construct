name: 'usb-construct CI'
on:
  push:
    branches-ignore:
      - 'gh-pages'
    paths:
      - '.github/workflows/ci.yml'
      - 'docs/**'
      - 'examples/**'
      - 'tests/**'
      - 'usb_construct/**'
      - 'noxfile.py'
      - 'pyproject.toml'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main

env:
  TOOL_PYTHON_VERSION: '3.11'

jobs:
  lint-usb-construct:
    runs-on: ubuntu-latest
    name: 'Lint USB Construct'
    steps:
      - name: 'Setup Python (${{ env.TOOL_PYTHON_VERSION }})'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.TOOL_PYTHON_VERSION }}

      - name: 'Initialize Environment'
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin:$PATH" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=\"`pwd`\"" >> $GITHUB_ENV

      - name: 'Install Dependencies'
        shell: bash
        run: |
          python -m pip install --user --upgrade pip setuptools wheel setuptools_scm nox

      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 'Install uv'
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false

      - name: 'Run Style Lint'
        shell: bash
        continue-on-error: true
        run: |
          nox -s lint

      - name: 'Run Type Checking'
        shell: bash
        continue-on-error: true
        run: |
          nox -s typecheck-mypy
          nox -s typecheck-pyright

  test-usb-construct:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.11', '3.12', '3.13', ]
        allow-failure:
         - false
        include:
          - python-version: '3.14-dev'
            allow-failure: true
          - python-version: 'pypy3.11'
            allow-failure: true

    name: 'Test USB Construct (Python ${{ matrix.python-version }})'
    continue-on-error: ${{ matrix.allow-failure }}
    steps:
      - name: 'Setup Python (${{ matrix.python-version }})'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Initialize Environment'
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin:$PATH" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=\"`pwd`\"" >> $GITHUB_ENV

      - name: 'Install Dependencies'
        shell: bash
        run: |
          python -m pip install --user --upgrade pip setuptools wheel setuptools_scm nox

      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 'Install uv'
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false

      - name: 'Run Tests'
        shell: bash
        run: |
          nox -s test

      - name: 'Codecov Upload'
        if: success() && github.repository == 'shrine-maiden-heavy-industries/usb-construct'
        uses: codecov/codecov-action@v5
        with:
          verbose: true
          files: ./build/tests/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  linkcheck-docs:
    runs-on: ubuntu-latest
    name: 'USB Construct Docs - Link-check'
    steps:
      - name: 'Setup Python (${{ env.TOOL_PYTHON_VERSION }})'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.TOOL_PYTHON_VERSION }}

      - name: 'Initialize Environment'
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin:$PATH" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=\"`pwd`\"" >> $GITHUB_ENV

      - name: 'Install Dependencies'
        shell: bash
        run: |
          python -m pip install --user --upgrade pip setuptools wheel setuptools_scm nox

      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 'Install uv'
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false

      - name: 'Link Check'
        shell: bash
        run: |
          nox -s linkcheck-docs

  build-docs:
    runs-on: ubuntu-latest
    name: 'USB Construct Docs - Build'
    steps:
      - name: 'Setup Python (${{ env.TOOL_PYTHON_VERSION }})'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.TOOL_PYTHON_VERSION }}

      - name: 'Initialize Environment'
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin:$PATH" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=\"`pwd`\"" >> $GITHUB_ENV

      - name: 'Install Dependencies'
        shell: bash
        run: |
          python -m pip install --user --upgrade pip setuptools wheel setuptools_scm nox

      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Install uv'
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false

      - name: 'Build Docs'
        shell: bash
        run: |
          nox -s build-docs

      - name: 'Upload docs artifact'
        if: success() && github.repository == 'shrine-maiden-heavy-industries/usb-construct' && github.event.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: docs
          include-hidden-files: true
          path: ./build/docs
          retention-days: 1

  docs:
    name: 'USB Construct Docs (Meta Job)'
    needs:
      - linkcheck-docs
      - build-docs
    runs-on: ubuntu-latest
    steps:
      - run: ${{ contains(needs.*.result, 'failure') && 'false' || 'true' }}

  ci-checkpoint:
    name: 'USB Construct CI Checkpoint (Meta Job)'
    needs:
      - lint-usb-construct
      - test-usb-construct
      - docs
    runs-on: ubuntu-latest
    steps:
      - run: ${{ contains(needs.*.result, 'failure') && 'false' || 'true' }}

  publish-docs:
    name: 'Publish USB Construct Docs'
    if: github.repository == 'shrine-maiden-heavy-industries/usb-construct' && github.event.ref == 'refs/heads/main' && github.event_name == 'push'
    needs:
      - ci-checkpoint
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 'Download docs artifact'
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: built_docs/

      - name: 'Deploy Docs'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: built_docs/
          clean: true

  publish-pypi:
    name: 'USB Construct - Publish PyPi package'
    if: github.repository == 'shrine-maiden-heavy-industries/usb-construct' && github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') && !contains(github.event.ref, 'dev')
    needs:
      - publish-docs
      - ci-checkpoint
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/usb-construct
    permissions:
      id-token: write
    steps:
      - name: 'Setup Python (${{ env.TOOL_PYTHON_VERSION }})'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.TOOL_PYTHON_VERSION }}

      - name: 'Initialize Environment'
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "$HOME/.local/bin:$PATH" >> $GITHUB_PATH
          echo "GITHUB_WORKSPACE=\"`pwd`\"" >> $GITHUB_ENV

      - name: 'Install Dependencies'
        shell: bash
        run: |
          python -m pip install --user --upgrade pip setuptools wheel setuptools_scm nox twine build

      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 'Install uv'
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false

      - name: 'Build wheel'
        shell: bash
        run: |
          nox -s dist

      - name: 'Check package'
        shell: bash
        run: |
          twine check build/dist/*

      - name: 'Publish to PyPi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: build/dist/

      - name: 'Upload wheel artifact'
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: build/dist/
